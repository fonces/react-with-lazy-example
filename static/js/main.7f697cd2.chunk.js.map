{"version":3,"sources":["Employees.js","Employee.js","Home.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["withLazy","_ref","employees","useLazy","fetch","then","res","json","react_default","a","createElement","map","employee","key","react_router_dom","to","concat","id","employee_name","employee_salary","employee_age","profile_image","createUseLazy","purge","withRouter","match","params","Fragment","type","onClick","name","value","Home","Nav","history","createBrowserHistory","Boolean","window","location","hostname","ReactDOM","render","react_router","Suspense","fallback","path","component","Employees","exact","Employee","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f697cd2.chunk.js","sourcesContent":["import React from \"react\";\nimport withLazy from \"react-with-lazy\";\nimport { Link } from 'react-router-dom'\n\nconst Employees = ({ useLazy }) => {\n  const employees = useLazy(() =>\n    fetch(\"https://dummy.restapiexample.com/api/v1/employees\")\n      .then(res => res.json())\n  );\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <td>id</td>\n          <td>employee_name</td>\n          <td>employee_salary</td>\n          <td>employee_age</td>\n          <td>profile_image</td>\n        </tr>\n      </thead>\n      <tbody>\n      {employees.map((employee, key) => (\n        <tr key={key}>\n          <td>\n            <Link to={`/employee/${employee.id}`}>{employee.id}</Link>\n          </td>\n          <td>{employee.employee_name}</td>\n          <td>{employee.employee_salary}</td>\n          <td>{employee.employee_age}</td>\n          <td>{employee.profile_image}</td>\n        </tr>\n      ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default withLazy(Employees);\n","import React from \"react\";\nimport { createUseLazy } from \"react-with-lazy\";\nimport { withRouter } from 'react-router';\n\nconst { useLazy, purge } = createUseLazy()\n\nconst Employee = ({ match }) => {\n  const id = match.params.id\n  const employee = useLazy(() =>\n    fetch(`https://dummy.restapiexample.com/api/v1/employee/${id}`).then(res =>\n      res.json()\n    ),\n    [id]\n  );\n\n  return (\n    <>\n      <table>\n        <thead>\n          <tr>\n            <td>id</td>\n            <td>employee_name</td>\n            <td>employee_salary</td>\n            <td>employee_age</td>\n            <td>profile_image</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>{employee.id}</td>\n            <td>{employee.employee_name}</td>\n            <td>{employee.employee_salary}</td>\n            <td>{employee.employee_age}</td>\n            <td>{employee.profile_image}</td>\n          </tr>\n        </tbody>\n      </table>\n      <input type={'button'} onClick={purge} name={'purge'} value={'purge'} />\n    </>\n  );\n};\n\nexport default withRouter(\n  Employee,\n);\n","import React from \"react\";\n\nexport default () => (\n  <div>Home</div>\n)\n","import React from \"react\";\nimport { Link } from 'react-router-dom'\n\nexport default () => (\n  <>\n    <ul>\n      <li><Link to=\"/\">Home</Link></li>\n      <li><Link to=\"/employees\">Employees</Link></li>\n    </ul>\n  </>\n)\n","import React from \"react\";\nimport { Router, Switch, Route } from 'react-router'\nimport { createBrowserHistory } from 'history'\nimport Employees from './Employees'\nimport Employee from './Employee'\nimport Home from './Home'\nimport Nav from './Nav'\n\nconst history = createBrowserHistory()\n\nexport default () => {\n  return (\n    <Router history={history}>\n      <Nav />\n      <Switch>\n        <React.Suspense fallback={<div>...loading</div>}>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/employees\" component={Employees} exact={true}/>\n          <Route path=\"/employee/:id\" component={Employee} exact={true}/>\n        </React.Suspense>\n      </Switch>\n    </Router>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}